@model EasyTravel.Web.ViewModels.BusSeatsViewModel

@{
    ViewData["Title"] = "Select Seats";
}

<div class="container my-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Select Your Seats</h4>
        </div>
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="seat-legend">
                        <div class="d-flex align-items-center mb-2">
                            <button class="seat legend-only" disabled>
                                <span class="available-display"></span>
                            </button>
                            <span class="ms-2">Available</span>
                        </div>
                        <div class="d-flex align-items-center mb-2">
                            <button class="seat legend-only" disabled>
                                <span class="selected-display"></span>
                            </button>
                            <span class="ms-2">Selected</span>
                        </div>
                        <div class="d-flex align-items-center">
                            <button class="seat legend-only" disabled>
                                <span class="booked-display"></span>
                            </button>
                            <span class="ms-2">Booked</span>
                        </div>
                    </div>
                </div>
            </div>




            <div class="seat-container text-center">
                <div class="bus-front mb-4">
                    <i class="fas fa-bus fa-2x"></i>
                    <p class="mt-2">Front</p>
                </div>

                <div class="seats-grid">
                    @for (char row = 'A'; row <= 'G'; row++)
                    {
                        <div class="seat-row">
                            @for (int col = 1; col <= 4; col++)
                            {
                                var seatNumber = $"{row}{col}";
                                // Find the seat in the model to determine availability


                                var seat = Model.Seats.FirstOrDefault(s => s.SeatNumber == seatNumber);

                                var statusClass = seat == null || seat.IsAvailable ? "available" : "booked";

                                <button class="seat @statusClass"
                                        onclick="toggleSeat(this)"
                                @(statusClass == "booked" ? "disabled" : "")
                                        data-seat-number="@seatNumber"
                                        data-seat-id="@((seat?.Id ?? Guid.Empty).ToString())">
                                    @seatNumber
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="text-end mt-6">
                <h5>Selected Seats: <span id="selectedSeatsDisplay">None</span></h5>
                <h5>Total Amount: ৳<span id="totalAmountDisplay">0</span></h5>
                <button type="button" onclick="continueToBooking()" class="update-btn mt-2">Continue</button>
            </div>
        </div>
    </div>
</div>

<form id="bookingForm" asp-controller="Bus" asp-action="PassengerDetails" method="post">
    <input type="hidden" id="selectedSeatsInput" name="selectedSeats" />
    <input type="hidden" id="selectedSeatIdsInput" name="selectedSeatIds" />
    <input type="hidden" id="totalAmountInput" name="totalAmount" />
    <input type="hidden" name="busId" value="@Model.Bus.Id" />
</form>

<style>
    .update-btn {
        text-decoration: none;
        display: inline-block;
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border-radius: 5px;
        border: none;
        transition: background-color 0.3s ease;
    }

        .update-btn:hover {
            background-color: #0056b3;
            text-decoration: none;
        }

    .seat-container {
        max-width: 600px;
        margin: 0 auto;
    }

    .seats-grid {
        display: inline-block;
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
    }

    .seat-row {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 10px;
    }

    .seat {
        width: 40px;
        height: 40px;
        border: 2px solid #ddd;
        border-radius: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8rem;
        transition: all 0.3s ease;
        cursor: pointer;
        background: none;
        padding: 0;
    }

    .legend-only {
        cursor: default;
        pointer-events: none;
    }

    .available-display {
        display: block;
        width: 100%;
        height: 100%;
        background-color: #fff;
        border-radius: 3px;
    }

    .selected-display {
        display: block;
        width: 100%;
        height: 100%;
        background-color: #28a745;
        border-radius: 3px;
    }

    .booked-display {
        display: block;
        width: 100%;
        height: 100%;
        background-color: #dc3545;
        border-radius: 3px;
    }

    .seat.available {
        background-color: #fff;
        color: #333;
    }

        .seat.available:hover {
            background-color: #e9ecef;
            border-color: #28a745;
        }

    .seat.selected {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }

    .seat.booked {
        background-color: #dc3545;
        color: white;
        border-color: #dc3545;
        cursor: not-allowed;
        opacity: 0.8;
    }

    .bus-front {
        color: #666;
    }
</style>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        let selectedSeats = new Set();
        let selectedSeatIds = new Set();
        const maxSeats = 4;
        const pricePerSeat = @Model.Bus.Price;
        const busId = '@Model.Bus.Id';
        let connection;

        // Initialize SignalR connection
        async function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/seatHub")
                .withAutomaticReconnect()
                .build();

            connection.on("SeatStatusChanged", (seatNumber, seatId, status) => {
                const seatElement = document.querySelector(`[data-seat-number="${seatNumber}"]`);
                if (!seatElement || selectedSeats.has(seatNumber)) return;

                if (status === "selected") {
                    seatElement.classList.remove("available");
                    seatElement.classList.add("booked");
                    seatElement.disabled = true;
                } else if (status === "available") {
                    seatElement.classList.remove("booked");
                    seatElement.classList.add("available");
                    seatElement.disabled = false;
                }
            });

            try {
                await connection.start();
                console.log("SignalR Connected!");
                await connection.invoke("JoinBusGroup", busId);
            } catch (err) {
                console.error("SignalR Connection Error: ", err);
            }
        }

        document.addEventListener("DOMContentLoaded", initializeSignalR);

        function toggleSeat(seatElement) {
            if (seatElement.classList.contains('booked')) return;

            const seatNumber = seatElement.getAttribute('data-seat-number');
            const seatId = seatElement.getAttribute('data-seat-id');

            if (!seatNumber || !seatId) return;

            if (seatElement.classList.contains('selected')) {
                seatElement.classList.remove('selected');
                seatElement.classList.add('available');
                selectedSeats.delete(seatNumber);
                selectedSeatIds.delete(seatId);

                if (connection.state === signalR.HubConnectionState.Connected) {
                    connection.invoke("SeatUnselected", busId, seatNumber, seatId).catch(err => console.error(err));
                }
            } else {
                if (selectedSeats.size < maxSeats) {
                    seatElement.classList.remove('available');
                    seatElement.classList.add('selected');
                    selectedSeats.add(seatNumber);
                    selectedSeatIds.add(seatId);

                    if (connection.state === signalR.HubConnectionState.Connected) {
                        connection.invoke("SeatSelected", busId, seatNumber, seatId).catch(err => console.error(err));
                    }
                } else {
                    alert('You can only select up to ' + maxSeats + ' seats.');
                }
            }

            updateDisplay();
        }

        function updateDisplay() {
            document.getElementById('selectedSeatsDisplay').textContent = selectedSeats.size > 0
                ? Array.from(selectedSeats).join(', ')
                : 'None';

            document.getElementById('totalAmountDisplay').textContent = (selectedSeats.size * pricePerSeat).toFixed(2);
        }

        function continueToBooking() {
            if (selectedSeats.size === 0) {
                alert('Please select at least one seat before proceeding.');
                return;
            }

            const selectedSeatsString = Array.from(selectedSeats).join(',');
            const selectedSeatIdsString = Array.from(selectedSeatIds).join(',');
            const totalAmount = (selectedSeats.size * pricePerSeat).toFixed(2);

            // Populate the hidden inputs in the form
            document.getElementById('selectedSeatsInput').value = selectedSeatsString;
            document.getElementById('selectedSeatIdsInput').value = selectedSeatIdsString;
            document.getElementById('totalAmountInput').value = totalAmount;

            // Submit the form
            document.getElementById('bookingForm').submit();
        }
    </script>
}